<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>404Found</title>
  
  <subtitle>瞅啥啥不会，做啥啥不对</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-30T02:03:38.418Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>把星子放入眸</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试中的计算机网络(二)</title>
    <link href="http://yoursite.com/2020/03/30/%E9%9D%A2%E8%AF%95%E4%B8%AD%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E4%BA%8C/"/>
    <id>http://yoursite.com/2020/03/30/面试中的计算机网络-二/</id>
    <published>2020-03-30T02:01:58.000Z</published>
    <updated>2020-03-30T02:03:38.418Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><ol><li><p>TCP和UDP特点</p><p>TCP：面向连接，提供可靠交付，拥塞控制，流量控制提供全双工通信，面向字节流的一对一通信<br>UDP：无连接，尽最大可能交付，面向报文，支持一对一，一对多和多对一。</p></li><li><p>TCP的粘包问题</p><ol><li>UDP不会有粘包问题，因为UDP是面向报文的，头部中有报文的最大长度。</li><li>TCP是面向字节流的，数据块之间没有明显的边界，所以TCP会有粘包问题。</li><li>发生粘包的原因主要是因为发送缓冲区大小固定，而数据大小不固定，如果数据超过缓冲区的长度，就会导致一次请求的数据分为多次发送。此外如果数据长度大于最大报文段MSS长度，也会导致拆包。最后，接收端没有及时读取接收缓冲区的数据时，也会导致粘包。</li><li>解决粘包问题的办法：消息定长、设置消息的边界（通过特殊字符）、自定义协议定义消息投消息体，头部中定义数据长度。</li></ol></li><li><p>Nagle算法</p><p>Nagle算法是指在TCP链接上最多只允许有一个未被确认的分组，在该分组收到确认之前不会发送其他的小分组。因为本身TCP协议发送数据时候要加上协议头，为了尽可能利用网络带宽，避免网络中有很多小的数据传送。Nagle的规则：</p><ol><li>如果包长达到MSS，则允许发送。</li><li>如果该包含有fin，则允许发送。</li><li>设置了TCP_NODELAY选项，则允许发送。</li><li>未设置TC_CORK选项，且所有发出去的小数据包都已收到确认，则允许发送。</li><li>若发生了超时（200ms），则立刻发送。</li></ol><p>“””<br>if there is new data to send</p><pre><code>if the window size &gt;= MSS and available data is &gt;= MSS    send complete MSS segment nowelse    if there is unconfirmed data still in the pipe        enqueue data in the buffer until an acknowledge is received    else        send data immediately    end ifend if</code></pre><p> end if<br>“””</p></li><li><p>延迟确认机制</p><p>针对ACK进行的优化，目的也是减少网络中的小报文。收到对方的报文之后，不会立刻发送ACK，二是等待一段时间，看有没有应答数据，跟随应答数据一起发送ACK报文。</p><p>延迟确认和nagle算法共存时，可能在数据包比较小的场景中导致较高的时延。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;计算机网络&quot;&gt;&lt;a href=&quot;#计算机网络&quot; class=&quot;headerlink&quot; title=&quot;计算机网络&quot;&gt;&lt;/a&gt;计算机网络&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;TCP和UDP特点&lt;/p&gt;
&lt;p&gt;TCP：面向连接，提供可靠交付，拥塞控制，流量控制提供全双工通信
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="Nagle" scheme="http://yoursite.com/tags/Nagle/"/>
    
  </entry>
  
  <entry>
    <title>MySQL学习大纲</title>
    <link href="http://yoursite.com/2020/03/17/MySQL%E5%AD%A6%E4%B9%A0%E5%A4%A7%E7%BA%B2/"/>
    <id>http://yoursite.com/2020/03/17/MySQL学习大纲/</id>
    <published>2020-03-17T08:12:03.000Z</published>
    <updated>2020-03-17T08:37:59.818Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-什么是索引？"><a href="#1-什么是索引？" class="headerlink" title="1.什么是索引？"></a>1.什么是索引？</h3><p>   索引，是一种以空间换时间的方法，类似于书的目录，方便帮助我们迅速定位到想要的数据。官方对索引的定义是“帮助Mysql高效获取数据的一种数据结构”，可见索引的本质是一种数据结构。<br>   索引的实现有很多中，例如Hash索引，B树索引，B+树索引，和全文索引。使用索引可以提高数据的检索速度，提高系统性能，但同时创建维护索引也需要耗费时间和空间。</p><h3 id="2-什么是B树索引"><a href="#2-什么是B树索引" class="headerlink" title="2.什么是B树索引?"></a>2.什么是B树索引?</h3><p>   B树又名平衡多路查找树，其基本特性是：<br>   1.所有节点的关键字按递增方式排序，左小右大。<br>   2.非叶子节点的节点数大于1，且小于等于M。(M&gt;=2，空树除外)<br>   3.节点关键字数大于等于ceil(m/2) - 1，且小于等于M-1个。(ceil为向上取整)<br>   4.所有叶子节点都在同一层，叶子节点的子节点指针指向null。</p><p>   B树相比于平衡二叉树，每个节点包含的关键词数量增加了，每次加载能加载更多的关键词到磁盘，因此可以加快查找速度。此外，因为每个一层节点数量增多，树的整体高度降低，也有效降低了查找的时间复杂度。</p><h3 id="4-什么是B-树索引"><a href="#4-什么是B-树索引" class="headerlink" title="4.什么是B+树索引?"></a>4.什么是B+树索引?</h3><p>   B+树是B树的一种升级版。相比于B树，B+树更加充分利用了节点的空间，让查找速度也更加稳定。B+树的特性：<br>   1.跟B树不同，B+树的非叶子节点不保存关键词记录的指针，只进行数据索引，这样可以使节点有更多的空间容纳更多的数据索引。因此B+树的高度更低，查询速度更快。<br>   2.B+树只有叶子节点会保存关键词记录的指针，数据查询必须到叶子节点才能获取到真正的数据，所以B+树查询的效率更加稳定。(等于树的高度)<br>   3.B+树的所有叶子节点从小到大有序排列，且每个节点都会保存指向其右侧兄弟节点的指针，因此范围查询遍历更加高效。有利于做全表扫描。<br>   4.非叶子节点的子节点数等于关键词数</p><p>   B树与B+树相比，其优势在于因为所有子节点都保存数据，所以查询根节点附近的数据时速度很快，热点数据查询效率比较高。</p><h3 id="5-索引的设计使用原则"><a href="#5-索引的设计使用原则" class="headerlink" title="5.索引的设计使用原则?"></a>5.索引的设计使用原则?</h3><p>   1.频繁作为查询条件的字段适合创建索引。<br>   2.更新频繁的字段不适合创建索引。<br>   3.不能有效区分数据的字段不适合作为索引。(例如性别，男、女，区分度太低)<br>   4.尽可能扩展索引而不是新建索引。例如在已有索引a的情况下，要创建(a,b)索引，直接扩展原有索引就好。<br>   5.定义有外键的数据列一定要有索引。<br>   6.查询较少，重复值比较多的列不要创建索引。<br>   7.定义为text，blob和image的数据列不要创建索引。<br>   8.最左前缀匹配原则。mysql会一直向右匹配直到遇见范围查询停止匹配。对于查询a=2 and b=2 and c&gt;3 and d = 4，如果建立(a,b,c,d)的索引，d是不会用上的，因为遇上c&gt;3范围匹配时就停止了，此时创建(a,b,d,c)就可以用上所有的索引。</p><p>   最左前缀匹配原则，顾名思义，按照索引的定义顺序，最左侧的最优先生效。定义时，把where最经常使用的一句放在最左边。</p><h3 id="6-Mysql存储引擎MyISAM和InnoDB区别？"><a href="#6-Mysql存储引擎MyISAM和InnoDB区别？" class="headerlink" title="6.Mysql存储引擎MyISAM和InnoDB区别？"></a>6.Mysql存储引擎MyISAM和InnoDB区别？</h3><p>   MyISAM使用B+树作为索引，叶子节点存储了数据记录的地址。MyISAM在检索数据的时候，首先根据key查询索引，找到对应的叶子节点，然后根据其data域的地址查询具体的数据记录。其所以跟数据是分开存储的，因此MyISAM的索引又被成为非聚簇索引。</p><p>   InnoDB不同之处在于，其数据文件本身就是索引文件。InnoDB的数据文件本身就是按照B+树组织的索引结构。数据跟所以放在一起，叶子节点存储了完整的数据记录，这种索引组织方式也叫聚簇索引。InnoDB的记录必须有主键，如果没有显示指定主键，InnoDB会默认生成一个隐含字段作为主键，其类型为长整型，长度6个字节。</p><p>   另一个不同之处在于，InnoDB的辅助索引，其叶子节点保存的是对应数据记录主键的值，使用辅助索引查询到对应的主键值后，再根据主键值查询主索引最终找到对应的数据记录。(这个过程被称为回表)<br>   (此外还有个索引覆盖的概念，其实就是在进行数据查询时索引表就已经有足够的数据返回，无需再到主键索引表查询数据。这里覆盖的含义是辅助索引或者联合索引的查询结构就cover了所需的数据)</p><p>   因此，使用InnoDB作为存储引擎的时候，应尽量使用与记录无关的自增字段作为主键。因为InnoDB使用聚簇索引，数据按照主键顺序存储在叶子节点。使用自增主键，每次插入记录都可以直接插入到下一个位置，不需要移动数据，会更加高效一些。</p><h3 id="7-什么是数据库事务"><a href="#7-什么是数据库事务" class="headerlink" title="7.什么是数据库事务?"></a>7.什么是数据库事务?</h3><p>   数据库的事务，是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位。数据库事务执行的结果是数据库从一个状态转移到另一个状态。事务是指逻辑上的一组操作，要么都执行，要么都不执行。</p><p>   数据库的事务主要有ACID四大特性：<br>   1.Atomicity，原子性，事务是最小的执行单位，不可分割。事务的原子性保证事务要么全部完成，要不都不执行。<br>   2.Consistency，一致性，执行事务前后，数据保持一致。多个事务对数据读取的结果是相同的。<br>   3.Isolation，隔离性，并发访问数据库时，一个用户的事务不被其他事务干扰，各个事务之间相互独立。<br>   4.Durability，持久性，一个事务对数据库造成的改变是持久的，数据库故障也不会对其造成任何影响。</p><h3 id="8-什么是脏读-幻读-不可重复读"><a href="#8-什么是脏读-幻读-不可重复读" class="headerlink" title="8.什么是脏读?幻读?不可重复读?"></a>8.什么是脏读?幻读?不可重复读?</h3><p>   1.脏读，一个事务访问到了另一个事务中没有提交的数据。<br>   2.幻读，在某个数据读取数据之后，另一个事务向表中插入了数据，前一个事物再次读取时会发现多了几行，就跟产生了幻觉一样。一个事物两次查询结果记录条数不一致。<br>   3.不可重复读，一个事物读取某条记录两次，得到的结果不一致。首次读取数据后，其他事务对该数据进行了修改。</p><h3 id="9-什么是数据库的隔离级别"><a href="#9-什么是数据库的隔离级别" class="headerlink" title="9.什么是数据库的隔离级别?"></a>9.什么是数据库的隔离级别?</h3><p>   MySQL共有四个隔离级别，分别是读取未提交、读取已提交、可重复读、可串行化。InnoDB中的默认隔离级别为可重复读。<br>   1.读取未提交。在该隔离级别，所有事物都可以看到其他事务没有提交的结果。因此会导致脏读、幻读、和不可重复读。<br>   2.读取已提交。一个事务只能看到其他已提交事务的结果。这种隔离界别会导致幻读和不可重复读。因为在两次读取期间可能会有其他事务修改数据。<br>   3.可重复读。MySQL InnoDB的默认隔离级别。可重复读可以确保事务在多次读取同一条记录时，获取到相同的结果，但是不能避免幻读的问题。(看起来是加了行锁)<br>   4.可串行化。最高的隔离级别，串行化执行数据，解决幻读的问题，这个级别会导致大量的超时和竞争。</p><h3 id="10-数据库内部有哪些锁"><a href="#10-数据库内部有哪些锁" class="headerlink" title="10.数据库内部有哪些锁?"></a>10.数据库内部有哪些锁?</h3><p>   按照锁的粒度分类，可以把数据库锁分为行级锁(InnoDB)、表级锁(MyISAM)和页级锁(BDB)。<br>   1.行级锁，是MySQL中粒度最小的一种锁，表示只对当前操作的行加锁。行级锁加锁粒度最小，但是加锁开销也最大。行级锁分为共享锁和排他锁。InnoDB的行级锁基于索引实现，select * from table where key = val for update;<br>   2.表级锁，是Mysql中粒度最大的一种锁，表示对当前的整张表加锁。他实现简单，资源消耗低，大部分引擎都支持。表级锁也分为共享锁和排他锁。<br>   3.页级锁，是粒度介于表级锁和行级锁之间的一种锁。通常用于锁定相邻的一组数据。</p><p>   按照锁的类别来分，可以把数据库锁分为共享锁和排他锁。<br>   1.共享锁，又叫读锁，当需要读取数据时，加上共享锁。共享锁可以同时加多个。<br>   2.排他锁，又叫写锁，当需要写入数据时，需要加上排他锁，排他锁跟其他排他锁以及共享锁都互斥。</p><p>   此外，数据库中还有乐观锁与悲观锁的概念。主要用于事务的并发控制。<br>   1.乐观锁，假设不会发生冲突，只在提交的时候校验是否违反事务的完整性。修改数据的时候把事务锁起来，直到事务提交。通过version的方式实现行锁定，一般通过版本号或者CAS实现。<br>   2.悲观锁，假设一定会发生冲突，屏蔽一切可能打破数据完整性的操作。在查询的时候就把事务锁起来，直到事务提交。一般通过数据库的锁实现。</p><p>   乐观锁多用于读多写少的场景，因为写入少那么冲突就会少，可以提高吞吐量。悲观锁多用于写多的情况，此时使用乐观锁不断重试反而可能降低性能。</p><h3 id="11-什么是MVVC"><a href="#11-什么是MVVC" class="headerlink" title="11.什么是MVVC?"></a>11.什么是MVVC?</h3><p>   MVVC，多版本并发控制，是数据库系统实现并发访问的一种方法。MySQL的InnoDB引擎支持MVVC，并且只在读取已提交和可重复读隔离界别下生效。面对高并发事务时，MVVC比单纯的行锁更加高效。MVVC的实现原理可以简单总结为以下几点：<br>   1.InnoDB的数据每条数据记录，除用户创建的字段之外，还有两个隐藏字段，分别是data_trasn_id和data_roll_ptr，其中data_trans_id保存了最好对该条记录进行修改的事务编号，而data_roll_ptr则保存了该条记录被修改的历史版本。此外如果改记录没有主键的话，还有生成一个默认的主键。在数据记录的头部还有一个删除标志位deleted_flag，用于标识记录是否被删除。<br>   2.在RC或者RR隔离级别下，每次执行select语句之前，都会将当前系统的活跃事务拷贝到一个列表生成ReadView，ReadView可以看做一个有序的窗口，保存当前活跃的事务ID列表，最左侧的称为up_limit_id，是当前活跃事务ID的最小值。最右侧的成为low_limit_id，是当前活跃事务的最大值。事务ID是事务开始是由InnoDB分配，代表了事务创建的先后顺序。因此可以通过事务ID大小来决定版本的可见性。<br>   3.如果当前版本的data_trans_id小于up_limit_id，说明当前记录版本是由已提交的事务修改的，可以直接访问。<br>   4.如果当前版本的data_trans_id大于low_limit_id，说明最后修改记录的事务是在ReadView创建之后才生成的，该版本的数据不能直接访问。此时根据data_roll_ptr链表中寻找上一个记录版本，再次进入3。<br>   5.如果当前版本的data_trans_id在up_limit_id和low_limit_id之间，则在ReadView中寻找是否包含data_trans_id的版本，如果找到，则说明该记录是被未提交的事务修改的，在data_roll_ptr中寻找上一个记录版本，在进入4，如果没找到，则说明修改该记录的事务已提交，可以直接读取记录。<br>   6.此时，数据记录已经可以访问，最后检查头部的deleted_flag是否为true，如果为true，说明该条记录已经被删除，返回空数据。<br>   7.最后补充一点，在RC隔离级别下，每次执行语句之前ReadView都会重新创建。在RR级别下，ReadView只在事务执行开始是执行一次，直到事务结束。所以RR级别下，事务执行期间所以其他事务的改动都是不可见的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-什么是索引？&quot;&gt;&lt;a href=&quot;#1-什么是索引？&quot; class=&quot;headerlink&quot; title=&quot;1.什么是索引？&quot;&gt;&lt;/a&gt;1.什么是索引？&lt;/h3&gt;&lt;p&gt;   索引，是一种以空间换时间的方法，类似于书的目录，方便帮助我们迅速定位到想要的数据。官方
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="MVVC" scheme="http://yoursite.com/tags/MVVC/"/>
    
      <category term="B树" scheme="http://yoursite.com/tags/B%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>面试中的操作系统-进程与线程</title>
    <link href="http://yoursite.com/2020/03/16/%E9%9D%A2%E8%AF%95%E4%B8%AD%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/03/16/面试中的操作系统-进程与线程/</id>
    <published>2020-03-16T09:51:42.000Z</published>
    <updated>2020-03-16T10:08:06.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面试中的操作系统之进程、线程和协程"><a href="#面试中的操作系统之进程、线程和协程" class="headerlink" title="面试中的操作系统之进程、线程和协程"></a>面试中的操作系统之进程、线程和协程</h1><h3 id="线程与进程的定义"><a href="#线程与进程的定义" class="headerlink" title="线程与进程的定义"></a>线程与进程的定义</h3><p><strong>进程是操作系统分配资源和调度的最小单位，是独立功能的程序在特定数据集合上的一次执行过程。线程是调度的基本单位，一个进程内可以有多个线程，共享进程的资源。</strong></p><blockquote><p>在linux下，进程的创建由fork实现。当fork函数被调用时，新创建的进程会完全拷贝父进程的资源和数据。fork调用结束后，父进程和子进程独立运行互不影响。<br>线程一般由pthread_create创建。同一个进程下可以创建多个线程，他们共享进程拥有的资源和数据，因此存在竞争的风险。因此多线程访问共享资源时，需要有同步措施以保证数据安全。线&gt; 程的生命周期跟父进程的生命周期有关，如果父进程退出，那么他所创建的所有线程都会退出。</p></blockquote><h3 id="进程-线程间通信方式"><a href="#进程-线程间通信方式" class="headerlink" title="进程/线程间通信方式"></a>进程/线程间通信方式</h3><ol><li>进程间常用的通信方式有：<br> 共享内存、消息队列、信号量、有名管道、无名管道、信号、文件、socket<ol><li>线程间通信方式，除进程间通信方式之外，还有：<br> 互斥量、锁</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;面试中的操作系统之进程、线程和协程&quot;&gt;&lt;a href=&quot;#面试中的操作系统之进程、线程和协程&quot; class=&quot;headerlink&quot; title=&quot;面试中的操作系统之进程、线程和协程&quot;&gt;&lt;/a&gt;面试中的操作系统之进程、线程和协程&lt;/h1&gt;&lt;h3 id=&quot;线程与进程
      
    
    </summary>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="进程与线程" scheme="http://yoursite.com/tags/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>面试中的计算机网络之三次握手四次断开</title>
    <link href="http://yoursite.com/2020/01/29/%E9%9D%A2%E8%AF%95%E4%B8%AD%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%96%AD%E5%BC%80/"/>
    <id>http://yoursite.com/2020/01/29/面试中的计算机网络之三次握手四次断开/</id>
    <published>2020-01-29T12:45:52.000Z</published>
    <updated>2020-01-30T04:15:13.497Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简单整理一下面试过程中遇到的计算机网络问题，方便后面复习。</p></blockquote><h2 id="1-TCP三次握手四次断开的过程简单描述"><a href="#1-TCP三次握手四次断开的过程简单描述" class="headerlink" title="1. TCP三次握手四次断开的过程简单描述"></a>1. TCP三次握手四次断开的过程简单描述</h2><h4 id="三次握手过程："><a href="#三次握手过程：" class="headerlink" title="三次握手过程："></a>三次握手过程：</h4><ol><li>第一次握手。客户端发起握手请求，携带标志SYN=1，序号取随机值seq=i。此时客户端进入SYN_SENT状态，等待服务器回包。</li><li>第二次握手。服务器收到请求回，回复数据包，SYN=1，ACK=1，ack=i+1，seq=j，j也是随机值。此时服务器进入SYN_RECV状态。</li><li>第三次握手。客户端收到服务器回包后，回复ACK=1，ack=j+1。此时客户端跟服务器都进入ESTABLISHED状态。</li></ol><h5 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h5><pre><code>双端第一个数据包时，包中的序号字段seq取值为一个跟时间相关的随机值，RFC793的一种实现是一个32bit的计数器，每4ms加1。ack的含义是下一次期望收到的序号，握手请求本身也会占用一个序号，所以ack=seq+1。正常情况下，ack应该取值为对方seq+包中数据长度。握手过程中，SYN标志位置1，代表本次请求是一个握手请求，ACK标志为置1，表示该请求是一个握手回复。印象中，第三次握手是可以跟正常的数据合并到一起发送的。（待确认）</code></pre><h4 id="四次断开的过程："><a href="#四次断开的过程：" class="headerlink" title="四次断开的过程："></a>四次断开的过程：</h4><ol><li>第一次断开。客户端发送一个FIN=1的数据包，用于中止客户端到服务器的数据通道。此时客户端进入FIN_WAIT_1状态。</li><li>第二次断开。服务器收到客户端的FIN请求之后，回复数据包ACK=1,ack=对方seq+1（FIN请求同样占用一个序号）。此时服务端进入CLOSE_WAIT状态。此时的TCP链接处于半链接状态，客户端已经不能向服务器发送数据，但是服务器依然可以向客户端发送数据。此时客户端处于FIN_WAIT_2状态。</li><li>第三次断开。服务器数据发送完毕后，发送一个FIN给客户端(ACK=1)，关闭服务端到客户端的数据通道。此时服务器进入LAST_ACK状态。</li><li>第四次断开。客户端收到FIN之后，回复ACK=1,ack=对方seq+1，同时进入TIME_WAIT状态。服务器收到最后的ack之后，进入CLOSED状态。</li></ol><h5 id="知识点：-1"><a href="#知识点：-1" class="headerlink" title="知识点："></a>知识点：</h5><pre><code>TCP是全双工的数据传输通道，所以客户端和服务端可以分别关闭自己的数据传输通道。只有双方都关闭之后，整个链接才算完整的关闭了该链接。</code></pre><h4 id="常见的问题："><a href="#常见的问题：" class="headerlink" title="常见的问题："></a>常见的问题：</h4><ol><li><p>为什么需要三次握手，两次握手为什么不可以？<br> 目的是为了防止已失效的握手数据包到达服务端。网络中存在延迟，客户端发出的连接请求报文并未丢失，而是在某个网络节点长时间滞留了，以致延误到链接释放以后的某个时间才到达Server。这是，Server误以为这是Client发出的一个新的链接请求，于是就向客户端发送确认数据包，同意建立链接。若不采用“三次握手”，那么只要Server发出确认数据包，新的链接就建立了。由于client此时并未发出建立链接的请求，所以其不会理睬Server的确认，也不与Server通信；而这时Server一直在等待Client的请求，这样Server就白白浪费了一定的资源。若采用“三次握手”，在这种情况下，由于Server端没有收到来自客户端的确认，则就会知道Client并没有要求建立请求，就不会建立链接。</p></li><li><p>为什么要有TIME_WAIT状态？<br> 在TCP链接释放过程中，首先关闭链接的一段会有TIME_WAIT状态。TIME_WAIT存在的原因主要有以下两点：<br> a. 为了保证TCP链接可靠的释放。在主动关闭方发送最后一个FIN的ack时，如果因为网络原因导致ack没有被对方收到就关闭了俩节。对方重发的FIN请求到达，此时主动关闭方已经进入CLOSED状态，因此会回复RST包。导致对方可能认为此时链接出现了问题，而此时其实链接处于正常关闭的状态。<br> b. 为了保证旧的链接的数据包在网络中彻底消失。TCP链接使用（local_ip，local_port，remote_ip，remote_port）来标志一个唯一链接。假如最后一个FIN因为超时进行了重发后双方正常关闭了了链接，并重新建立了新的链接。如果网络中遗留的上一个链接的FIN数据包到达，有可能导致不可预知的问题。为了避免这种情况，在链接关闭后的TIME_WAIT状态（2MSL的时间）时，此IP端口不会被使用，不会建立新的链接。<br> c. MSL是报文最大生存时间，2MSL的目的是让对方的FIN报文以及自己的ACK报文都能在网络中消失。<br> d. 对处于TIME_WAIT状态的端口建立新的链接时会提示address already in use，为了防止这种情况，可以设置socket的SO_REUSEADDR的选项来避免TIME_WAIT状态。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;简单整理一下面试过程中遇到的计算机网络问题，方便后面复习。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-TCP三次握手四次断开的过程简单描述&quot;&gt;&lt;a href=&quot;#1-TCP三次握手四次断开的过程简单描述&quot; class=&quot;headerl
      
    
    </summary>
    
    
      <category term="面试中的计算机网络" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E4%B8%AD%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>必知必会的面试题集合</title>
    <link href="http://yoursite.com/2019/02/27/%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%86%E5%90%88/"/>
    <id>http://yoursite.com/2019/02/27/必知必会的面试题集合/</id>
    <published>2019-02-27T06:13:47.000Z</published>
    <updated>2019-02-28T02:50:22.090Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-网络服务如何保证幂等性？"><a href="#1-网络服务如何保证幂等性？" class="headerlink" title="1. 网络服务如何保证幂等性？"></a>1. 网络服务如何保证幂等性？</h3><p>幂等性最初来自于数学上的概念，f(x)=f(f(x)) 。当某个运算为幂等运算时，其作用在任何一个元素两次后跟作用一次的结果相同。在编程领域，幂等性意味着对同一个系统，同样的条件下，一个请求和多个重复的请求对系统资源的影响是一致的。<br>幂等性最常见的例子就是支付，用户购买商品时需要使用在线支付，如果用户支付成功，但返回结果时候网络异常，此时钱已经扣了，但用户没有收到支付成功的提醒。此时如果用户再次点击支付，将进行二次扣款，这样就会导致用户的钱被扣了两次，造成错误。<br>我们的服务有很多操作是天然实现幂等性的，比如查询接口。但对于增加，更新，删除等，如何保证幂等性呢？</p><h5 id="1-全局唯一的ID"><a href="#1-全局唯一的ID" class="headerlink" title="(1). 全局唯一的ID"></a>(1). 全局唯一的ID</h5><p>对于业务的每一次操作都生成一个全局ID，在执行操作前先检查该ID是否已执行过该操作。如果没有则把ID存储，正常执行该操作，如果已存在则表明该操作已经执行。<br>订单支付这个场景就可以使用订单ID作为全局的ID，用于保证服务的幂等性。</p><h5 id="2-去重表"><a href="#2-去重表" class="headerlink" title="(2). 去重表"></a>(2). 去重表</h5><p>利用数据库表的特性来实现幂等性，常用思路是在表上构建一个唯一索引，保证一旦一个操作执行完毕后，后续的操作进行相同的插入操作时没有办法写入成功。<br>例如要防止重复点赞，可以设计一个表，将被点赞内容ID和用户ID建立唯一索引，用户每次点赞就往表中写入一条数据，这样重复点赞的记录没有办法写入，就能实现点赞的幂等性。</p><h5 id="3-MVCC方案"><a href="#3-MVCC方案" class="headerlink" title="(3). MVCC方案"></a>(3). MVCC方案</h5><p>多版本控制，该策略主要使用update with condition来保证多次外部请求调用对于系统的影响是一致的。在系统设计时，合理使用乐观锁，通过版本号来做乐观锁的判断条件，这样即使在并发的情况下，系统也不会有太大的问题。例如：</p><blockquote><p>select * from tablename where condition=#condition# //取出要跟新的对象，带有版本versoin<br>update tableName set name=#name#,version=version+1 where version=#version#</p></blockquote><h5 id="4-状态机"><a href="#4-状态机" class="headerlink" title="(4). 状态机"></a>(4). 状态机</h5><p>这种方法适合在有状态机流转的情况下，比如就会订单的创建和付款，订单的付款肯定是在之前，这时我们可以通过在设计状态字段时，使用int类型，并且通过值类型的大小来做幂等，比如订单的创建为0，付款成功为100,付款失败为99。</p><blockquote><p>update <code>order</code> set status=#{status} where id=#{id} and status&lt;#{status}</p></blockquote><h3 id="2-memcached和redis对比"><a href="#2-memcached和redis对比" class="headerlink" title="2. memcached和redis对比"></a>2. memcached和redis对比</h3><p>memcached和redis都属于内存数据库，在设计上有很多相同之处，功能和应用场合也相似。Redis与memcached最大的不同在于，redis的所有数据不都是一直在内存中。下面从功能，性能和应用场景简单分析一下memcached和redis。</p><h5 id="1-性能"><a href="#1-性能" class="headerlink" title="(1). 性能"></a>(1). 性能</h5><p>redis使用单核，而memcached使用多喝，所以平均每一个核上redis在存储小数据是比memcached性能更高。但在100K以上的数据时，memcached的性能要高于redis。</p><h5 id="2-功能"><a href="#2-功能" class="headerlink" title="(2). 功能"></a>(2). 功能</h5><pre><code>- memcached只支持内存的key-value存储，而redis则可以支持Strings，Lists，Sets，Sorted Set，Hash等多种类型。- memcached数据全放在内存中，不支持存储持久化，因此服务如果挂掉，数据不可恢复，而redis支持数据持久化，提供了snapshotting和AOF两种方式持久化数据到硬盘上，数据丢失后可以恢复。从这点上说，redis更像是一个完整的数据库系统。- memcached提供了cas命令，可以保证多个并发访问操作同一份数据的一致性问题。redis没有提供cas命令，但因为redis是单进程处理请求，所有的命令串行执行，所以并发情况下不需要考虑一致性问题。同时，redis也提供了事务的能力，可以保证特定操作的原子性。</code></pre><h5 id="3-应用场景"><a href="#3-应用场景" class="headerlink" title="(3). 应用场景"></a>(3). 应用场景</h5><pre><code>- 相对于memcached，redis的出现时间更晚且功能更完备，我们通常将其视为首选方案，但在某些特殊场景下，memcached有着显著的优势。一是对于小型静态数据的缓存处理，最具代表性的例子就是缓存HTML片段。memcached的内部内存管理机制相对redis来说更加简单，但也更有效率--这是因为memcached在处理元数据是所消耗的内存资源相对更少。作为memcached唯一支持的一种数据类型，字符串适合保存那些只需要读取的操作，因为字符串本身无需进一步的处理。二是memcached在横向扩展方面相对于redis也更有优势。由于其在设计上的思路倾向以及相对简单的功能设置，memcached在实现扩展是比redis简单的多。- redis几乎在缓存管理中的每一个方面都表现出优于memcached的性能。redis在排行榜，列表，消息订阅，队列等方面都有不错的应用场景，如果需要支持复杂类型，那么redis是你不二的选择（划水）。。。- https://blog.csdn.net/sosfnima/article/details/51993181- https://blog.csdn.net/u011489043/article/details/78922390</code></pre><h3 id="3-mysql性能优化"><a href="#3-mysql性能优化" class="headerlink" title="3. mysql性能优化"></a>3. mysql性能优化</h3><p>谈到Mysql优化，每个人收藏了很多技巧：不要使用SELECT * ，不要使用NULL字段，合理创建索引等等，问题是，你真的理解这些优化技巧背后的原理吗？</p><h5 id="1-Scheme设计与数据类型优化"><a href="#1-Scheme设计与数据类型优化" class="headerlink" title="(1). Scheme设计与数据类型优化"></a>(1). Scheme设计与数据类型优化</h5><p>选择数据类型要遵循小而简单的原则，越小的数据类型通常会更快，占用更少的内存，磁盘，和CPU处理周期。例如整形比字符操作代价第，因而应该使用整型来存储IP地址，使用DATETIME来存储时间，而不是字符串。这里总结几个容易理解错误的几个技巧:</p><pre><code>- 通常来说可以把为NULL的列改成NOT NULL不会对性能提升有很多帮助，只是如果计划在列上做索引，就应该将该列设置为NOT NULL。- 对指数类型指定宽度，比如INT(11)没有任何卵用，INT使用32位存储空间，那么他的表示范围已经确定，INT(1)和INT(20)对于存储和计算都是相同的。- UNSIGNED标识不允许负值，大致上可以使正整数的上线提高一倍，比如TINYINT的存储范围是-128~127，而UNSIGNED TINYINT的存储范围是0~255。- 通常来讲,没有太大的必要使用DECIMAL数据类型。即使需要存储财务数据时，仍然可以使用BIGINT。比如需要精确到万分之一，那么可以将数据乘以一万然后使用BIGINT存储，这样可以避免浮点数计算不准确和DECIMAL精确计算代价高的问题。- TIMESTAMP使用4个字节存储，DATETIMNE使用8个字节存储。因为TIMESTAMP只能表示1970-2038年，比DATETIME的表示范围小很多，而且TIMESTAMP的值因时区不同而不同。- 大多数情况下没有使用枚举类型的必要，其中一个缺点是枚举的字符串列表是固定的，添加和删除字符串必须使用ALTER TABLE。- schema的列不要太多。原因是存储引擎的API工作时需要在服务器层和存储层之间通过缓冲格式拷贝数据，然后在服务器层将缓冲数据解码成各个列，这个转换的过程代价很高。如果列太多而实际使用的列很少的话，会导致CPU占用过高。- 大表ALTER TABLE非常耗时，MySQL执行大部分修改结构操作的方法是用新的结构创建一个空表，然后从旧的表中查出所有数据插入到新表，然后删除旧表。尤其当内存不大而表很大，而且还有很大索引的情况下，耗时更久。</code></pre><h5 id="2-创建高性能索引"><a href="#2-创建高性能索引" class="headerlink" title="(2). 创建高性能索引"></a>(2). 创建高性能索引</h5><p>索引是提高MySQL查询性能的一个重要途径，但过多的索引可能会导致过高的磁盘使用率以及过高的内存占用，从而影响应用程序的整体性能。应当尽量避免事后才想起添加索引，因为事后可能需要大量的监控大量的SQL才能定位到问题所在，而且添加索引的时间肯定大于初试添加索引的时间。<br>创建索引时，应注意以下几个问题：</p><pre><code>- 非独立的列无法使用索引，例如表达式，函数等等- 如果列很长，可以索引开始的部分字符，这样可以有效减少索引空间，提高索引效率- 多数情况下，多个列上创建索引不能提高查询性能。当多个索引做相交操作时，一个包含所有相关列的索引优于多个独立索引。当多个索引做联合操作时，对结果集的合并、排序等操作要消耗大量的CPU和内存资源，特别是当其中的某些索引选择性不高，需要返回合并大量数据的时候，查询成本更高，这个时候还不如走全表扫描。- 避免多个范围条件。- 覆盖索引。如果一个索引包含或者说覆盖所有需要查询的字段的值，那么就没有必要再回表查询，这就成为覆盖索引。覆盖索引是非常有用的工具，可以极大地提高性能，因为查询只需要扫描索引会带来额外的好处：索引条目小于数据行大小，如果只读取索引，极大减少数据访问量。索引是有按照列增值顺序存储的，对于IO密集型的范围查询要比随机从磁盘读取每一个的数据IO要少的多。- 尽量减少冗余索引，冗余索引是在相同的列上按照相同的顺序创建相同类型的索引。- 删除长时间未使用的索引。</code></pre><h5 id="3-特定类型查询优化"><a href="#3-特定类型查询优化" class="headerlink" title="(3). 特定类型查询优化"></a>(3). 特定类型查询优化</h5><pre><code>- 优化COUNT()查询。COUNT()有两种不同的作用，其一是统计某个列值的数量，其二是统计行数。统计列值时要求列值是非空的，它不会统计NULL。如果确认括号内表达式不为空时，则就是在统计行数，作用等同于COUNT(**)。这里常常会有个误解，以为COUNT(col)性能更好，但其实这个只是统计了某列非NULL的数量。如果要统计函数，直接使用COUNT(**)就好，意义清晰，且性能更好。在有些场景下业务并不需要精确的COUNT值，此时可以用EXPLAIN来获取一个近似行数。EXPLAIN不需要真正的去执行查询，所以成本非常低。- 优化关联查询。在大量数据的情境下，表与表之间通过一个冗余字段来关联比直接使用JOIN有更好的性能。如果确实需要使用JOIN来进行查询，则需要注意：a. 确保ON和USING的列上有索引; b. 确保任何的GROUP BY和ORDER BY中的表达式只涉及一个表中的列，这样MySQL才会有可能使用索引来优化。- 优化LIMIT分页。需要使用分页操作时，通常使用LIMIT加上便宜来实现，同时加上合适的ORDER BY字段。如果有对应的索引，通常效率不错，否则，MySQL需要做大量的文件排序操作。一个常见的问题是当偏移量非常大的时候，例如LIMIT 10000 20，MySQL需要查询10020条数据并将之前的10000条数据全部丢弃。优化这种查询的方法就是尽可能使用覆盖索引进行扫描，而不是查询所有的列。然后根据需要做一次查询再返回所有的列，对于便宜量非常大是，这样做的效率提升会非常大。考虑下面的例子:&gt;  SELECT film_id,description FROM film ORDER BY title LIMIT 50,5;如果这个表非常的大，那么查询改成下面这样将大幅度提升查询效率:&gt; SELECT film.film_id,film.description FROM film INNER JOIN (SELECT film_id FROM film ORDER BY title LIMIT 50,5) AS tmp USING(film_id);有时候可以记录上次数据读取位置，下次可以直接从该位置开始扫描，这样就可以避免使用OFFSET，例如:&gt; SELECT id FROM t LIMIT 10000, 10;改为&gt; SELECT id FROM t WHERE id &gt; 10000 LIMIT 10;- 优化UNION。MySQL处理UINON的策略是先创建临时表，然后把各个查询结果插入到临时表中，最后再来做查询。因此很多优化策略在UNION中都没有很好的处理。此时需要手动将WHERE、LIMIT、ORDER BY等条件字句放到各个子查询中，以便优化器可以充分利用这些条件进行优化。除非确实需要服务器去重，否则一定要使用UNION ALL，如果没有ALL关键字，MySQL会给临时表加上DISTINCT选项，这会导致整个临时表的数据做唯一性检查，这样做的代价非常高。当然即使使用了ALL关键字，MySQL也总是将结果放入临时表，然后再读出返回给客户端。虽然很多时候没有这个必要，比如有时候可以直接把子查询的结果返回给客户端。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-网络服务如何保证幂等性？&quot;&gt;&lt;a href=&quot;#1-网络服务如何保证幂等性？&quot; class=&quot;headerlink&quot; title=&quot;1. 网络服务如何保证幂等性？&quot;&gt;&lt;/a&gt;1. 网络服务如何保证幂等性？&lt;/h3&gt;&lt;p&gt;幂等性最初来自于数学上的概念，f(x)=
      
    
    </summary>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="后台开发" scheme="http://yoursite.com/tags/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>畅游Linux(2)-如何愉快的处理文件</title>
    <link href="http://yoursite.com/2019/02/22/%E7%95%85%E6%B8%B8Linux-2-%E5%A6%82%E4%BD%95%E6%84%89%E5%BF%AB%E7%9A%84%E5%A4%84%E7%90%86%E6%96%87%E6%9C%AC/"/>
    <id>http://yoursite.com/2019/02/22/畅游Linux-2-如何愉快的处理文本/</id>
    <published>2019-02-22T09:17:34.000Z</published>
    <updated>2019-03-07T09:19:59.779Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-grep命令"><a href="#1-grep命令" class="headerlink" title="1.grep命令"></a>1.grep命令</h3><p>grep全称global regular expression print（全局正则表达式输出），常用于文件中特定内容的查找，其命令格式为:</p><blockquote><p>grep [option] pattern file<br>grep命令会把查到的那一行展示出来，并不会改变被查找的文件内容，option常用取值如下：</p><ol><li>-c 只打印匹配的文本行数，不显示内容。</li><li>-i 匹配时忽略大小写。</li><li>-h 当搜索多个文件时，不显示匹配文件前缀名。</li><li>-n 列出所有匹配的行，并显示行号。</li><li>-l 只列出含有匹配行的文件的文件名，不显示匹配内容。</li><li>-v 只显示不匹配的文本行。</li><li>-w 匹配整个单词。</li><li>-x 匹配整个文本行。</li><li>-r 递归搜索，搜索当前目录和子目录。</li><li>-E 支持扩展正则表达式。</li></ol></blockquote><p>下面找几个典型的使用locate查找的例子：</p><ol><li>在多个文件之间查询，查询时忽略大小写<blockquote><p>grep -i “hello world” a.txt b.txt</p></blockquote></li><li>将/etc/passwd中含有root的行打印出来，并展示行号<blockquote><p>grep -n root /etc/passwd</p></blockquote></li><li>将/etc/passwd中不含root的行提取戳来<blockquote><p>grep -v root /etc/passwd</p></blockquote></li><li>将/etc/passwd中不含root和admin的行提取出来<blockquote><p>grep -v root /etc/passwd | grep -v admin</p></blockquote></li><li>递归查找/etc下含有root的文件并展示行号<blockquote><p>grep -rn root /etc<br>要查找的字符串还可以使用通配符，例如：</p></blockquote></li><li>查找/etc/passwd 中以r开头的行并打印<blockquote><p>grep -n “^r” /etc/passwd</p></blockquote></li><li>查找/etc/passwd中包含oo或者et的行<blockquote><p>grep -n “oo|et” /etc/passwd<br>此外，grep还常用来与一些系统常用命令结合，来获取某些特定信息例如：</p></blockquote></li><li>查看系统是否含有game相关的进程<blockquote><p>ps -ef | grep game</p></blockquote></li><li>查看3333端口是否被监听<blockquote><p>netstat -an | grep 3333</p></blockquote></li></ol><h3 id="2-awk命令"><a href="#2-awk命令" class="headerlink" title="2.awk命令"></a>2.awk命令</h3><p>与普通的linux命令不同，awk命令更多情况下被称作一种编程语言。其一般被用作linux/unix下的文本和数据处理。数据可以来自于文件，或者其他命令的输出，它支持用户自定义函数和正则表达式等功能。<br>awk命令基本结构如下：</p><blockquote><p>awk ‘BEGIN{ print “start” } pattern{ commands } END{ print “end” }’ file<br>一个awk命令通常由：BEGIN语句块、使用模式匹配的通用语句块、END语句块三部分组成。这三部分是可选的，任何一个部分都可以不出现在脚本中，脚本通常被单引号或者双引号引用。例如：<br>awk ‘BEGIN{ i=0 } { i++ } END{ print i }’ filename<br>对任意一个awk命令<br>awk ‘BEGIN{ commands } pattern{ commands } END{ commands }’<br>工作流程是：</p><ol><li>执行BEGIN{commands}语句块中的语句。</li><li>从文件或者标准输入(stdin)输入一行，然后执行pattern{commands}语句块，它逐行扫描文件，从第一行到最后一行重复这个过程，直到所有的文件都被读取完毕。</li><li>当读至输入流末尾时，执行END{commands}语句块。<br>BEGIN语句块：在awk开始从输入流读取文件之前执行，常用与变量初始化，是一个可选的语句块。<br>END语句块：在awk从输入流中读取完所有行之后被执行，可用来打印汇总信息，也是一个可选的语句块。<br>pattern语句块：命令中最重要的部分，也是可选的。如果没有pattern语句块，默认执行{print}打印每一个读取到的行。awk读取每一行时都会执行该语句。</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-grep命令&quot;&gt;&lt;a href=&quot;#1-grep命令&quot; class=&quot;headerlink&quot; title=&quot;1.grep命令&quot;&gt;&lt;/a&gt;1.grep命令&lt;/h3&gt;&lt;p&gt;grep全称global regular expression print（全局正则表达式输
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="经验总结" scheme="http://yoursite.com/tags/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
      <category term="文件处理" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>畅游Linux(1)-如何愉快的查找文件</title>
    <link href="http://yoursite.com/2019/02/15/%E7%95%85%E6%B8%B8Linux-1-%E5%A6%82%E4%BD%95%E6%84%89%E5%BF%AB%E7%9A%84%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/02/15/畅游Linux-1-如何愉快的查找文件/</id>
    <published>2019-02-15T07:45:34.000Z</published>
    <updated>2019-02-16T09:08:18.340Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-find命令"><a href="#1-find命令" class="headerlink" title="1.find命令"></a>1.find命令</h3><p>Linux 中find命令常用来在某个目录下查找目录或者文件，其使用语法规则如下：</p><blockquote><p>find path -option [ -print ] [ -exec -ok command] {}\;<br>其中，-print代表将找到的文件输出到标准输出；-exec和-ok作用类似，找到文件后执行某个命令。不同之处在于，-ok在执行命令之前需要用户确认<br>常用的option命令有：</p><ol><li>-mount, -xdev : 只检查和指定目录在同一个文件系统下的文件，避免列出其它文件系统中的文件。</li><li>-amin n : 在过去n分钟内被读取过。</li><li>-anewer file : 比文件file更晚被读取过的文件。</li><li>-atime n : 在过去n天内被读取过的文件。</li><li>-cmin n : 在过去n分钟内被修改过。</li><li>-cnewer file :比文件file更新的文件。</li><li>-ctime n : 在过去n天内被修改过的文件。</li><li>-empty : 空的文件。</li><li>-gid n or -group name :gid是n或是group名称是name。</li><li>-ipath p, -path p : 路径名称符合p的文件ipath会忽略大小写。</li><li>-name name, -iname name : 文件名称符合name的文件。iname会忽略大小写。</li><li>-size n : 文件大小 是n单位，b 代表512位元组的区块，c表示字元数，k表示kilo bytes，w是二个位元组。</li><li>-pid n : process id是n的文件</li><li>-type c : 文件类型是c的文件。(type后面跟的类型还可以是，d:目录，c: 字型装置文件，b: 区块装置文件，p: 具名贮列，f: 一般文件，l: 符号连结，s: socket)</li><li>-perm n : 按照文件权限查找，例如-perm 655</li><li>-prune : 查找时排除某些目录</li><li>-user : 查找某些用户的文件</li><li>-group : 查找某些用户组的文件</li></ol></blockquote><p>下面找几个典型的使用find查找的例子：</p><ol><li>查找目录下所有扩展名为cpp的文件：<blockquote><p>find . -name “*.cpp”</p></blockquote></li><li>查找目录及其子目录下所有最近20天内更新过的文件：<blockquote><p>find . -ctime -20</p></blockquote></li><li>查找/var/log目录中更改时间在7日以前的普通文件，并在删除之前询问：<blockquote><p>find /var/log -type f -mtime +7 -ok rm {} \</p></blockquote></li><li>查找前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件：<blockquote><p>find . -type f -perm 644 -exec ls -l {} \</p></blockquote></li><li>为了查找系统中所有文件长度为0的普通文件，并列出它们的完整路径：<blockquote><p>find / -type f -size 0 -exec ls -l {} \</p></blockquote></li><li>在当前目录下查找长度超过10块的文件(一块等于512字节):<blockquote><p>find . -size +10</p></blockquote></li><li>在/apps目录下查找文件，忽略/apps/bin目录(需要注意的是，此处的-o为表达式，当-o前面的语句生效时不执行-o后面的语句)：<blockquote><p>find /apps -name “target” -prune -o -print</p></blockquote></li></ol><h3 id="2-locate命令"><a href="#2-locate命令" class="headerlink" title="2.locate命令"></a>2.locate命令</h3><p>locate命令作用上类似于find -name，使用一般格式如下：</p><blockquote><p>Locate [选择参数] [样式]<br>locate实现方式是在系统中维护一个所有文件及其所在路径的数据库。查找的时候直接在DB中进行查找，所以查找速度非常快，但是缺点也很明显，查找结果比较依赖于数据库的更新速度。如果文件是最近刚建立，在DB没有更新的情况下可能locate查找失败。<br>locate使用的索引数据库一般放在crontab中定时更新，也可以使用updatedb手动更新索引数据库。locate常用的参数有：</p><ol><li>-e 将排除在寻找的范围之外。</li><li>-f 将特定的档案系统排除在外，例如我们没有到理要把 proc 档案系统中的档案 放在资料库中。</li><li>-q 安静模式，不会显示任何错误讯息。</li><li>-n 至多显示 n个输出。</li><li>-r 使用正规运算式 做寻找的条件。</li><li>-o 指定资料库存的名称。 </li><li>-d 指定资料库的路径</li></ol></blockquote><p>下面找几个典型的使用locate查找的例子：</p><ol><li>忽略大小写查找当前目录下D开头的文件：<blockquote><p>locate -i ./d</p></blockquote></li><li>2.查找/etc目录下以m开头的文件： <blockquote><p>locate /etc/m</p></blockquote></li></ol><h3 id="3-whereis命令"><a href="#3-whereis命令" class="headerlink" title="3.whereis命令"></a>3.whereis命令</h3><p>whereis命令类似于locate，不同之处在于，whereis一般只用于二进制文件(-b)，man帮助文件(-m)以及源码文件(-s)的查找。<br>whereis命令的有点与缺点类似，唯一的区别是whereis一般不支持模糊查找,而locate是可以支持模糊查找的。</p><h3 id="4-which命令"><a href="#4-which命令" class="headerlink" title="4.which命令"></a>4.which命令</h3><p>which命令用于命令的查找，查找路径是系统的PATH目录：</p><blockquote><p>Locate 可执行文件名<br>which 使用的参数有：</p><ol><li>-n 指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。</li><li>-p 与-n参数相同，但此处的包括了文件的路径。</li><li>-w 指定输出时栏位的宽度。</li></ol></blockquote><p>例如要查找ls命令，可以使用</p><blockquote><p>which ls</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-find命令&quot;&gt;&lt;a href=&quot;#1-find命令&quot; class=&quot;headerlink&quot; title=&quot;1.find命令&quot;&gt;&lt;/a&gt;1.find命令&lt;/h3&gt;&lt;p&gt;Linux 中find命令常用来在某个目录下查找目录或者文件，其使用语法规则如下：&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="查找" scheme="http://yoursite.com/tags/%E6%9F%A5%E6%89%BE/"/>
    
      <category term="经验总结" scheme="http://yoursite.com/tags/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>简单理解正向代理，反向代理与负载均衡</title>
    <link href="http://yoursite.com/2019/02/13/%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>http://yoursite.com/2019/02/13/简单理解正向代理，反向代理与负载均衡/</id>
    <published>2019-02-13T03:08:00.000Z</published>
    <updated>2019-02-13T06:49:04.355Z</updated>
    
    <content type="html"><![CDATA[<p>正向代理与反向代理是相对的一组概念，简单来说，正向代理隐藏了客户端，而反向代理则隐藏了服务端。</p><p><a href="https://postimg.cc/wtc28nbf" target="_blank" rel="noopener"><img src="https://i.postimg.cc/Gp65YCPC/3.png" alt="正向代理与反向代理"></a></p><p>正向代理常见的应用例如，VPN。如果在国内是没有办法直接访问Google，Youtube等网站。那我们就可以在国外买一台服务器搭一个VPN，然后通过该服务器访问国外的网站。这台VPN服务器充当的就是正向代理的角色。</p><p>而反向代理通常对开发来说更熟悉一些。Google的服务器可能有成千上万台，当我们访问Google官网的时候，代理服务器请将我们的请求转发到某一台服务器上，此时的代理就是反向代理。</p><p>负载均衡的主要目标就是将请求分发到几台服务器上来环境单台服务器的压力，提高服务质量。反向代理是实现负载均衡的实现手段，但反向代理的作用又不仅限于负载均衡。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;正向代理与反向代理是相对的一组概念，简单来说，正向代理隐藏了客户端，而反向代理则隐藏了服务端。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://postimg.cc/wtc28nbf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;htt
      
    
    </summary>
    
    
      <category term="正向代理" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
      <category term="反向代理" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
      <category term="负载均衡" scheme="http://yoursite.com/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
</feed>
