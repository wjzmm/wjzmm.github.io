<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>404Found</title>
  
  <subtitle>瞅啥啥不会，做啥啥不对</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-15T08:57:31.746Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>把星子放入眸</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>畅游Linux(1)-如何愉快的查找文件</title>
    <link href="http://yoursite.com/2019/02/15/%E7%95%85%E6%B8%B8Linux-1-%E5%A6%82%E4%BD%95%E6%84%89%E5%BF%AB%E7%9A%84%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/02/15/畅游Linux-1-如何愉快的查找文件/</id>
    <published>2019-02-15T07:45:34.000Z</published>
    <updated>2019-02-15T08:57:31.746Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-find命令"><a href="#1-find命令" class="headerlink" title="1.find命令"></a>1.find命令</h3><p>Linux 中find命令常用来在某个目录下查找目录或者文件，其使用语法规则如下：</p><blockquote><p>find path -option [ -print ] [ -exec -ok command] {}\;</p></blockquote><p>其中，-print代表将找到的文件输出到标准输出；-exec和-ok作用类似，找到文件后执行某个命令。不同之处在于，-ok在执行命令之前需要用户确认<br>常用的option命令有：</p><ol><li>-mount, -xdev : 只检查和指定目录在同一个文件系统下的文件，避免列出其它文件系统中的文件。</li><li>-amin n : 在过去n分钟内被读取过。</li><li>-anewer file : 比文件file更晚被读取过的文件。</li><li>-atime n : 在过去n天内被读取过的文件。</li><li>-cmin n : 在过去n分钟内被修改过。</li><li>-cnewer file :比文件file更新的文件。</li><li>-ctime n : 在过去n天内被修改过的文件。</li><li>-empty : 空的文件。</li><li>-gid n or -group name :gid是n或是group名称是name。</li><li>-ipath p, -path p : 路径名称符合p的文件ipath会忽略大小写。</li><li>-name name, -iname name : 文件名称符合name的文件。iname会忽略大小写。</li><li>-size n : 文件大小 是n单位，b 代表512位元组的区块，c表示字元数，k表示kilo bytes，w是二个位元组。</li><li>-pid n : process id是n的文件</li><li>-type c : 文件类型是c的文件。(type后面跟的类型还可以是，d:目录，c: 字型装置文件，b: 区块装置文件，p: 具名贮列，f: 一般文件，l: 符号连结，s: socket)</li><li>-perm n : 按照文件权限查找，例如-perm 655</li><li>-prune : 查找时排除某些目录</li><li>-user : 查找某些用户的文件</li><li>-group : 查找某些用户组的文件</li></ol><p>下面找几个典型的使用find查找的例子：</p><ol><li>查找目录下所有扩展名为cpp的文件：<blockquote><p>find . -name “*.cpp”</p></blockquote></li><li>查找目录及其子目录下所有最近20天内更新过的文件：<blockquote><p>find . -ctime -20</p></blockquote></li><li>查找/var/log目录中更改时间在7日以前的普通文件，并在删除之前询问：<blockquote><p>find /var/log -type f -mtime +7 -ok rm {} \</p></blockquote></li><li>查找前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件：<blockquote><p>find . -type f -perm 644 -exec ls -l {} \</p></blockquote></li><li>为了查找系统中所有文件长度为0的普通文件，并列出它们的完整路径：<blockquote><p>find / -type f -size 0 -exec ls -l {} \</p></blockquote></li><li>在当前目录下查找长度超过10块的文件(一块等于512字节):<blockquote><p>find . -size +10</p></blockquote></li><li>在/apps目录下查找文件，忽略/apps/bin目录(需要注意的是，此处的-o为表达式，当-o前面的语句生效时不执行-o后面的语句)：<blockquote><p>find /apps -name “target” -prune -o -print</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-find命令&quot;&gt;&lt;a href=&quot;#1-find命令&quot; class=&quot;headerlink&quot; title=&quot;1.find命令&quot;&gt;&lt;/a&gt;1.find命令&lt;/h3&gt;&lt;p&gt;Linux 中find命令常用来在某个目录下查找目录或者文件，其使用语法规则如下：&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="查找" scheme="http://yoursite.com/tags/%E6%9F%A5%E6%89%BE/"/>
    
      <category term="经验总结" scheme="http://yoursite.com/tags/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>简单理解正向代理，反向代理与负载均衡</title>
    <link href="http://yoursite.com/2019/02/13/%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>http://yoursite.com/2019/02/13/简单理解正向代理，反向代理与负载均衡/</id>
    <published>2019-02-13T03:08:00.000Z</published>
    <updated>2019-02-13T06:49:04.355Z</updated>
    
    <content type="html"><![CDATA[<p>正向代理与反向代理是相对的一组概念，简单来说，正向代理隐藏了客户端，而反向代理则隐藏了服务端。</p><p><a href="https://postimg.cc/wtc28nbf" target="_blank" rel="noopener"><img src="https://i.postimg.cc/Gp65YCPC/3.png" alt="正向代理与反向代理"></a></p><p>正向代理常见的应用例如，VPN。如果在国内是没有办法直接访问Google，Youtube等网站。那我们就可以在国外买一台服务器搭一个VPN，然后通过该服务器访问国外的网站。这台VPN服务器充当的就是正向代理的角色。</p><p>而反向代理通常对开发来说更熟悉一些。Google的服务器可能有成千上万台，当我们访问Google官网的时候，代理服务器请将我们的请求转发到某一台服务器上，此时的代理就是反向代理。</p><p>负载均衡的主要目标就是将请求分发到几台服务器上来环境单台服务器的压力，提高服务质量。反向代理是实现负载均衡的实现手段，但反向代理的作用又不仅限于负载均衡。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;正向代理与反向代理是相对的一组概念，简单来说，正向代理隐藏了客户端，而反向代理则隐藏了服务端。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://postimg.cc/wtc28nbf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;htt
      
    
    </summary>
    
    
      <category term="正向代理" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
      <category term="反向代理" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
      <category term="负载均衡" scheme="http://yoursite.com/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>2019&#39;s todo list</title>
    <link href="http://yoursite.com/2019/02/12/2019-s-todo-list/"/>
    <id>http://yoursite.com/2019/02/12/2019-s-todo-list/</id>
    <published>2019-02-12T07:01:49.000Z</published>
    <updated>2019-02-13T06:54:29.715Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h2><h4 id="接入层"><a href="#接入层" class="headerlink" title="接入层"></a>接入层</h4><pre><code>- 负载均衡- 流量控制- 降级- 熔断- 防雪崩- ...</code></pre><h4 id="逻辑层"><a href="#逻辑层" class="headerlink" title="逻辑层"></a>逻辑层</h4><pre><code>- 可扩展 (水平/垂直)- 隔离- 解耦- RPC (dubbo/thrift/grpc)- 连接池- 消息队列 (RocketMQ/RabbitMQ/Kafka/ZeroMQ/redis)- 延迟加载- 数据预读- 轮询通知- 事件系统- 模块化</code></pre><h4 id="数据层"><a href="#数据层" class="headerlink" title="数据层"></a>数据层</h4><pre><code>- 缓存 (缓存穿透/缓存雪崩/缓存击穿)- 一致性(CAP/分布式锁/一致性算法/幂等)- 主从架构- 去中心化架构- 唯一ID生成- 一致性Hash- 数据库扩展</code></pre><h4 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h4><pre><code>- 服务注册与发现 (名字服务)- 服务路由- 服务网关- 配置中心</code></pre><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><pre><code>- 监控系统- 日志系统- 测试- 平滑启动- 异地多活- docker**待续...**</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;分布式系统&quot;&gt;&lt;a href=&quot;#分布式系统&quot; class=&quot;headerlink&quot; title=&quot;分布式系统&quot;&gt;&lt;/a&gt;分布式系统&lt;/h2&gt;&lt;h4 id=&quot;接入层&quot;&gt;&lt;a href=&quot;#接入层&quot; class=&quot;headerlink&quot; title=&quot;接入层&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="TODO" scheme="http://yoursite.com/tags/TODO/"/>
    
  </entry>
  
</feed>
